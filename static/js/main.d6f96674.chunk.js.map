{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","guardarBusqueda","useState","termino","guardarTermino","error","guardarError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","guardarImagenes","paginaactual","guardarPaginaActual","totalpaginas","guardarTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d6f96674.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (  \r\n        <p className=\"my-3 p-4 text-center alert alert-primary\">{mensaje}</p>\r\n    );\r\n}\r\n\r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\n\r\nconst Formulario = ({guardarBusqueda}) => {\r\n\r\n    const [termino,guardarTermino] = useState('');\r\n    const [error,guardarError] = useState(false);\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        if(termino.trim() === \"\"){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        guardarError(false);\r\n        \r\n        guardarBusqueda(termino);\r\n\r\n\r\n    };\r\n\r\n    return (  \r\n        <form\r\n            onSubmit= {handleSubmit}\r\n        >\r\n        \r\n            <div className=\"row\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Busca una imagen ej: futbol\"\r\n                        \r\n                        onChange = {e => guardarTermino(e.target.value)}\r\n                    />    \r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-danger btn-block\"\r\n                        value=\"Buscar\"\r\n                    />    \r\n                </div>\r\n\r\n            </div>\r\n            {error ? <Error mensaje=\"Completar el campo\" /> : null}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Imagen = ({imagen}) => {\r\n\r\n\r\n    const{largeImageURL, likes, previewURL, tags, views} = imagen;\r\n    return (  \r\n        <div className=\"col-12  col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n        \r\n            <div className=\"card\">\r\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{likes} Me Gusta</p>\r\n                    <p className=\"card-text\">{views} Vistas</p>\r\n\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <a\r\n                        href={largeImageURL}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                    \r\n                        className=\"btn btn-primary btn-block\"\r\n                    >Ver Imagen</a>\r\n\r\n                </div>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Imagen;","import React from 'react';\r\nimport Imagen from './Imagen';\r\n\r\nconst ListadoImagenes = ({imagenes}) => {\r\n\r\n \r\n    return (  \r\n        <div className=\"col-12 p-5 row\">\r\n            {imagenes.map(imagen => (\r\n                <Imagen\r\n                    key={imagen.id}\r\n                    imagen = {imagen}\r\n                />    \r\n            ))}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListadoImagenes;","\nimport React, {useEffect, useState } from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoImagenes from './components/ListadoImagenes';\n\n\nfunction App() {\n  const [busqueda,guardarBusqueda] = useState(\"\");\n  const [imagenes ,guardarImagenes] = useState([]);\n  const [paginaactual,guardarPaginaActual] = useState(1);\n  const [totalpaginas,guardarTotalPaginas] =useState(1);\n\n\n  useEffect(() => {\n    const consultarApi = async() => {\n      if(busqueda === \"\") return;\n      const imagenesPorPagina = 32;\n      const key = '18396671-070e4513bbf6e04f773cbac40';\n      const url = `http://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`;\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n\n      guardarImagenes(resultado.hits);\n\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina );\n      guardarTotalPaginas(calcularTotalPaginas);\n\n      const jumbotron = document.querySelector('.jumbotron');\n      jumbotron.scrollIntoView({behavior: \"smooth\"});\n    }\n  \n    consultarApi();\n  },[busqueda,paginaactual]);\n\n    const paginaAnterior= () => {\n      const nuevaPaginaActual = paginaactual - 1;\n      if(nuevaPaginaActual === 0) return;\n      guardarPaginaActual(nuevaPaginaActual);\n\n    }\n    const paginaSiguiente = ()  => {\n      const nuevaPaginaActual = paginaactual + 1;\n      if (nuevaPaginaActual > totalpaginas) return;\n      guardarPaginaActual(nuevaPaginaActual);\n    }\n\n\n  return (\n    <div className=\"container\">\n  \n      <div className=\"jumbotron\">\n        <h1 className=\" text-center mb-5\">Buscador de Imagenes</h1>\n        <Formulario \n          guardarBusqueda = {guardarBusqueda}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <ListadoImagenes\n            imagenes = {imagenes}\n          />  \n        {(paginaactual === 1)? null : (\n          <button \n                type=\"button\"\n                className=\"bbtn btn-info mr-1\"\n                onClick={paginaAnterior}\n          >&laquo; Anterior </button>\n        )} \n        {paginaactual === totalpaginas? null : (\n          <button \n                type=\"button\"\n                className=\"bbtn btn-info mr-1\"\n                onClick={paginaSiguiente}\n          > Siguente &raquo;</button>\n        )}\n\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}